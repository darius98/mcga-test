add_custom_target(mcga_test_check COMMAND ${CMAKE_CTEST_COMMAND})
message(STATUS "${CMAKE_CTEST_COMMAND}")

include(FindThreads)

function(add_unit_test TEST_NAME)
    cmake_parse_arguments(P "NO_EXECUTOR_TYPE" "" "" ${ARGN})
    set(UNIT_TEST mcga_test_unit_${TEST_NAME})
    add_executable(${UNIT_TEST} ${P_UNPARSED_ARGUMENTS})
    target_link_libraries(${UNIT_TEST} mcga_test_static)
    add_dependencies(mcga_test_check ${UNIT_TEST})

    if (P_NO_EXECUTOR_TYPE)
        add_test(NAME ${UNIT_TEST} COMMAND ${UNIT_TEST})
    else ()
        add_test(NAME ${UNIT_TEST}_boxed COMMAND ${UNIT_TEST} --executor=boxed)
        add_test(NAME ${UNIT_TEST}_smooth COMMAND ${UNIT_TEST} --executor=smooth)
    endif ()
endfunction()

function(add_integration_test TEST_NAME)
    add_executable(mcga_test_integration_${TEST_NAME} ${ARGN})
    set_target_properties(mcga_test_integration_${TEST_NAME} PROPERTIES RUNTIME_OUTPUT_NAME ${TEST_NAME})
    target_link_libraries(mcga_test_integration_${TEST_NAME} mcga_test_static ${CMAKE_THREAD_LIBS_INIT})
    add_dependencies(mcga_test_check mcga_test_integration_${TEST_NAME})
endfunction()

function(add_basic_test TEST_NAME)
    set(BASIC_TEST mcga_test_basic_${TEST_NAME})
    add_executable(${BASIC_TEST} ${ARGN})
    target_link_libraries(${BASIC_TEST} PUBLIC mcga_test)
    add_dependencies(mcga_test_check ${BASIC_TEST})

    add_test(NAME ${BASIC_TEST} COMMAND ${BASIC_TEST})
endfunction()

add_basic_test(core_configs basic/configs.cpp)

add_integration_test(pass integration/pass.cpp)
add_integration_test(fail integration/fail.cpp)
add_integration_test(optional_fail integration/optional_fail.cpp)
add_integration_test(multiple_executions_pass integration/multiple_executions_pass.cpp)
add_integration_test(multiple_executions_fail integration/multiple_executions_fail.cpp)
add_integration_test(multiple_executions_skip integration/multiple_executions_skip.cpp)
add_integration_test(kbs integration/kbs.cpp)
add_integration_test(timeout integration/timeout.cpp)
add_integration_test(exit_0 integration/exit_0.cpp)
add_integration_test(exit_1 integration/exit_1.cpp)
add_integration_test(fail_in_thread integration/fail_in_thread.cpp)
add_integration_test(skipped_test integration/skipped_test.cpp)
add_integration_test(skipped_test_thread integration/skipped_test_thread.cpp)
add_integration_test(single_file_multiple_cases integration/multiple_test_cases.cpp)
add_integration_test(multiple_files integration/multiple_files_1.cpp integration/multiple_files_2.cpp)
add_integration_test(multiple_tests_one_fails integration/multiple_tests_one_fails.cpp)
add_integration_test(emit_warnings integration/emit_warnings.cpp)
add_integration_test(set_up_tear_down_order integration/set_up_tear_down_order.cpp)
add_integration_test(fail_in_set_up integration/fail_in_set_up.cpp)
add_integration_test(fail_in_tear_down integration/fail_in_tear_down.cpp)
add_integration_test(fail_in_cleanup integration/fail_in_cleanup.cpp)
add_integration_test(skip_in_set_up integration/skip_in_set_up.cpp)
add_integration_test(skip_in_tear_down integration/skip_in_tear_down.cpp)

add_test(NAME mcga_test_integration_tests
        COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/integration/test_integration.py
        WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

add_unit_test(check_death NO_EXECUTOR_TYPE unit/check_death_test.cpp)
add_unit_test(death_matchers NO_EXECUTOR_TYPE unit/death_matchers_test.cpp)

add_unit_test(function_mock unit/function_mock_test.cpp)
target_link_libraries(mcga_test_unit_function_mock mcga_mock)
